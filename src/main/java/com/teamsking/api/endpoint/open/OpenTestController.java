package com.teamsking.api.endpoint.open;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.teamsking.api.dto.open.AddOpenTestQuizDto;
import com.teamsking.api.dto.open.OpenTestDto;
import com.teamsking.api.dto.open.OpenTestDtoMapper;
import com.teamsking.api.dto.open.OpenTestNameDto;
import com.teamsking.api.endpoint.BaseController;
import com.teamsking.domain.entity.open.OpenTest;
import com.teamsking.domain.service.open.OpenTestService;
import com.teamsking.util.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
*@author linhao
*/
@RestController
@Slf4j
@Api(tags = "班次-测验管理操作接口")
public class OpenTestController extends BaseController {

    @Autowired
    OpenTestService openTestService;

    /**
     * 获取班次-测验管理列表
     * @param pageNo
     * @param pageSize
     * @return
     */
    @ApiOperation(value = "班次-测验管理操列表", notes = "可分页", produces = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页码", required = true, example = "1"),
            @ApiImplicitParam(name = "pageSize", value = "页大小", required = true, example = "10")
    })
    @GetMapping("/open_tests")
    public Result openTestList(int pageNo, int pageSize){

        PageHelper.startPage(fixPage(pageNo),fixPage(pageSize));
        List<OpenTest> openTestList = openTestService.list();
        List<OpenTestDto> openTestDtoList = OpenTestDtoMapper.INSTANCE.entityListToDtoList(openTestList);
        return Result.success().addData("pager",warpPage(openTestDtoList));
    }

    /**
     * 添加班次-测验管理
     * @param openTest
     * @return
     */
    @ApiOperation(value = "添加班次-测验", consumes = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "openTest", value = "班次-测验", required = true, dataType = "OpenTestDto")
    })
    @PostMapping("/open_test")
    public Result addOpenTest(@RequestBody OpenTestDto openTest){

        OpenTest openTestEntity = OpenTestDtoMapper.INSTANCE.dtoToEntity(openTest);
        openTestService.save(openTestEntity);
        return Result.success();
    }

    /**
     * 删除班次-测验管理
     * @param id
     * @return
     */
    @ApiOperation(value = "删除班次-测验", consumes = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "班次-测验的主键", required = true, dataType = "int")
    })
    @DeleteMapping("/open_test/{id}")
    public Result removeOpenTest(@PathVariable("id") int id){

        openTestService.remove(id);
        return Result.success();
    }

    /**
     * 修改班次-测验管理
     * @param id
     * @param openTest
     * @return
     */
    @ApiOperation(value = "修改班次-测验", consumes = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "openTest", value = "班次-测验", required = true, dataType = "OpenTestDto")
    })
    @PutMapping("/open_test/{id}")
    public Result modifyOpenTest(@PathVariable("id") int id,
                                 @RequestBody OpenTestDto openTest){

        OpenTest openTestEntity = OpenTestDtoMapper.INSTANCE.dtoToEntity(openTest);
        openTestEntity.setId(id);
        openTestService.modify(openTestEntity);
        return Result.success();
    }



    @ApiOperation(value = "根据班课id获取测验列表", produces = "application/json")
    @ApiImplicitParams( {
            @ApiImplicitParam(name = "openId", value = "班课的id", required = true, dataType = "Integer"),
            @ApiImplicitParam(name = "pageNo", paramType = "query",value = "页码", required = true, example = "1"),
            @ApiImplicitParam(name = "pageSize", paramType = "query", value = "页大小", required = true, example = "10")
    })
    @GetMapping("/open/{openId}/test")
    public Result getOpenTestByOpenIdList(@PathVariable int openId, @RequestParam int pageNo, @RequestParam int pageSize){

        Page page = openTestService.getOpenTestListByOpenId(openId,fixPage(pageNo),fixPage(pageSize));
        if (null == page){
            return Result.success().addData("pager",null);
        }else {
            return Result.success().addData("pager", warpPage(page));
        }
    }




    @ApiOperation(value = "根据班课id添加测验", consumes = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "addOpenTestQuizDto", value = "班次作业", required = true, dataType = "AddOpenTestQuizDto"),
            @ApiImplicitParam(name = "openId", value = "班课主键", required = true, dataType = "Integer")
    })
    @PostMapping("/open_test_quiz/{openId}")
    public Result addOpenTestByOpenId(@RequestBody AddOpenTestQuizDto addOpenTestQuizDto,
                                    @PathVariable int openId){

        openTestService.saveOpenTestByOpenId(addOpenTestQuizDto,openId);

        return Result.success();

    }



    @ApiOperation(value = "根据节id添加测验", consumes = "application/json")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "addOpenTestQuizDto", value = "班次作业", required = true, dataType = "AddOpenTestQuizDto"),
            @ApiImplicitParam(name = "sectionId", value = "节id", required = true, dataType = "Integer")
    })
    @PostMapping("/open_test/{sectionId}/quiz")
    public Result addOpenTestBySectionId(@RequestBody AddOpenTestQuizDto addOpenTestQuizDto,
                                      @PathVariable int sectionId){

        openTestService.saveOpenTestBySectionId(addOpenTestQuizDto,sectionId);

        return Result.success();

    }


}
